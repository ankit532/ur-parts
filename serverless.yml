# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: UR-urparts
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: us-east-2
  apiGateway:
    restApiId:
      "Fn::ImportValue": URApiGateway-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": URApiGateway-rootResourceId
  # apiGateway:
  #   restApiId: punhzhfuxg
  #   restApiRootResourceId: zeh2ipdq1g
  # profile: vishnu #Replace it with your own profile name

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions: 
  getAlls:
    handler: functions/getAll.main
    events:
      - http:
          path: getAllParts
          method: get
          #authorizer: ${self:custom.authorizer}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  getById:
    handler: functions/getById.main
    events:
      - http:
          path: partOrders/{id}
          method: get
          #authorizer: ${self:custom.authorizer}
          request:
            parameters:
              paths:
                id: true
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  partStats:
    handler: functions/partStats.main
    events:
      - http:
          path: partStats
          method: get
          #authorizer: ${self:custom.authorizer}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  partOrders:
    handler: functions/partOrders.main
    events:
      - http:
          path: partOrders
          method: get
          #authorizer: ${self:custom.authorizer}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            
  partOrderReturns:
    handler: functions/partOrderReturns.main
    events:
      - http:
          path: partOrderReturns
          method: get
          #authorizer: ${self:custom.authorizer}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            
  partOrderRequests:
    handler: functions/partOrderRequests.main
    events:
      - http:
          path: partOrderRequests
          method: get
          #authorizer: ${self:custom.authorizer}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false